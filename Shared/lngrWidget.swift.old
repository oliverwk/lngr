//
//  lngrWidget.swift
//  lngrWidget
//
//  Created by Olivier Wittop Koning on 06/03/2021.
//

import WidgetKit
import SwiftUI
import Combine

struct Provider: TimelineProvider {
    static func getDataFromApi(completion: ((Lingerie) -> Void)?) {
        let urlString = "https://raw.githubusercontent.com/oliverwk/wttpknng/master/Lingerie.json"
        
        let url = URL(string: urlString)!
        let urlRequest = URLRequest(url: url)
        let task = URLSession.shared.dataTask(with: urlRequest) { data, urlResponse, error in
            parseResponseAndGetLingerie(data: data, urlResponse: urlResponse, error: error, completion: completion)
        }
        task.resume()
    }
    
    static func parseResponseAndGetLingerie(data: Data?, urlResponse: URLResponse?, error: Error?, completion: ((Lingerie) -> Void)?) {
        
        guard error == nil, let content = data else {
            print("error getting data from API")
            let response = OneLingerie
            completion?(response)
            return
        }
        
        let lngrApiResponse: Lingerie
        do {
            lngrApiResponse = try JSONDecoder().decode([Lingerie].self, from: content)[0]
        } catch {
            print("error parsing json from data")
            let response = OneLingerie
            completion?(response)
            return
        }
        completion?(lngrApiResponse)
        
    }
    func placeholder(in context: Context) -> SimpleEntry {
        SimpleEntry(date: Date(), lingerie: Lingerie(naam: "Een String",
                                                     prijs: 0.00,
                                                     img_url: "",
                                                     img_url_sec: "",
                                                     imageUrls: [""]))
    }
    
    func getSnapshot(in context: Context, completion: @escaping (SimpleEntry) -> ()) {
        let entry = SimpleEntry(date: Date(), lingerie: Lingerie(naam: "Een String",
                                                                 prijs: 0.00,
                                                                 img_url: "",
                                                                 img_url_sec: "",
                                                                 imageUrls: [""]))
        completion(entry)
    }
    
    func getTimeline(in context: Context, completion: @escaping (Timeline<Entry>) -> ()) {
        Provider.getDataFromApi() { lingerie in
            var entries: [SimpleEntry] = []
            var entry: SimpleEntry
            entry = SimpleEntry(date: Date(), lingerie: lingerie)
            entries.append(entry)
            let timeline = Timeline(entries: entries, policy: .atEnd)
            completion(timeline)
        }
    }
}

struct SimpleEntry: TimelineEntry {
    let date: Date
    let lingerie: Lingerie
}


struct lngrWidgetEntryView : View {
    var entry: Provider.Entry
    
    var body: some View {
        Text(String(entry.lingerie.naam))
            .font(.title)
            .fontWeight(.heavy)
            .foregroundColor(Color.black)
    }
}

@main
struct lngrWidget: Widget {
    let kind: String = "lngrWidget"
    
    var body: some WidgetConfiguration {
        StaticConfiguration(kind: kind, provider: Provider()) { entry in
            lngrWidgetEntryView(entry: entry)
        }
        .configurationDisplayName("lngr watcher")
        .description("Watch your lingerie right from your homescreen with the new lngr widget.")
        .supportedFamilies([.systemSmall])
    }
}

struct lngrWidget_Previews: PreviewProvider {
    static var previews: some View {
        lngrWidgetEntryView(entry: SimpleEntry(date: Date(), lingerie: OneLingerie))
            .previewContext(WidgetPreviewContext(family: .systemSmall)).preferredColorScheme(.light)
            .previewDevice("iPhone 8")
    }
}

struct Lingerie: Codable, Identifiable {
    public var id = UUID()
    public var naam: String
    public var prijs: Double
    public var img_url: String
    public var img_url_sec: String
    public var imageUrls: [String]
    
    
    enum CodingKeys: String, CodingKey {
        case naam = "naam"
        case prijs = "prijs"
        case img_url = "img_url"
        case img_url_sec = "img_url_sec"
        case imageUrls = "imageUrls"
    }
}

let OneLingerie = Lingerie(naam: "Niets gevonden",
                           prijs: 0.00,
                           img_url: "",
                           img_url_sec: "",
                           imageUrls: [
                            "https://www.na-kd.com/resize/globalassets/cotton_thong-1013-000820-0002_04k.jpg?width=640",
                            "https://www.na-kd.com/resize/globalassets/cotton_thong-1013-000820-0002_03h.jpg?width=640",
                            "https://www.na-kd.com/resize/globalassets/cotton_thong-1013-000820-0002_02i.jpg?width=640",
                            "https://www.na-kd.com/resize/globalassets/cotton_thong-1013-000820-0002_01j.jpg?width=640"
                           ])
